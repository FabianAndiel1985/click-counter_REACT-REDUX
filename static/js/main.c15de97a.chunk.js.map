{"version":3,"sources":["reducers/incrementReducer.js","components/heading.js","components/button.js","components/clickcounter.js","actions/increment.js","App.js","serviceWorker.js","index.js"],"names":["initialState","count","increaseReducer","state","action","type","Heading","props","this","value","Component","Button","onClick","increment","ClickCounter","mapDispatchToProps","ClickCounterContainer","connect","App","className","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"oRAAIA,G,MAAe,CAClBC,MAAM,IAgBQC,MAbd,WAAwD,IAA/BC,EAA8B,uDAAtBH,EAAcI,EAAQ,uCAEvD,MAAkB,aAAfA,EAAOC,KACF,CAACJ,MAAME,EAAMF,MAAM,GAKnBE,G,4BCEMG,G,MAZf,kDACQ,WAAYC,GAAO,uCACTA,GAFlB,qDAMY,OACQ,8CAAoBC,KAAKD,MAAME,MAA/B,UAPpB,GAA6BC,cCYdC,E,kDAXd,WAAYJ,GAAO,uCACDA,G,qDAIjB,OACC,4BAAQK,QAASJ,KAAKD,MAAMM,WAA5B,iB,GAPkBH,a,ICIfI,E,kDAEL,WAAYP,GAAO,uCACFA,G,qDAIhB,OACC,6BACC,kBAAC,EAAD,CAASE,MAAOD,KAAKD,MAAME,QAC3B,kBAAC,EAAD,CAAQI,UAAWL,KAAKD,MAAMM,iB,GAVPH,aAsBvBK,EAAsB,CACxBF,UC7BK,WACN,MAAS,CAACR,KAAK,eDiCDW,EAFaC,aAVN,SAACd,GACtB,MAAO,CACNM,MAAMN,EAAMF,SAQuCc,EAAzBE,CAA6CH,GEhB1DI,E,uKATb,OACE,yBAAKC,UAAU,OACd,kBAAC,EAAD,W,GAJaT,aCOEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAIC,EAAQC,YAAYxB,GAGxByB,IAASC,OACP,kBAAC,IAAD,CAAUH,MAASA,GACjB,kBAAC,EAAD,OAEFI,SAASC,eAAe,W","file":"static/js/main.c15de97a.chunk.js","sourcesContent":["let initialState = {\r\n\tcount:0\r\n}\r\n\r\n function increaseReducer(state = initialState, action) {\r\n\t\r\n\tif(action.type == \"INCREMENT\") {\r\n\t\treturn {count:state.count+1}\r\n\t}\r\n\t\r\n\r\n\telse {\r\n\t\treturn state;\r\n\t}\r\n\r\n}\r\n\r\nexport default increaseReducer;\r\n","import React, {Component} from 'react';\r\n\r\nexport class Heading extends Component {\r\n        constructor(props){\r\n            super(props);\r\n        }\r\n\r\n        render() {\r\n            return(\r\n                    <h1>Click Counter: {this.props.value}  </h1>    \r\n                )\r\n        }\r\n}\r\n\r\nexport default Heading;","import React, {Component} from 'react';\r\n\r\nclass Button extends Component {\r\n\tconstructor(props){\r\n\t            super(props);\r\n\t        }\t\r\n\t        \r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<button onClick={this.props.increment}> Count Up</button>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Button;","import React, {Component} from 'react';\r\nimport{ connect }from 'react-redux';\r\nimport Heading from './heading';\r\nimport Button from './button';\r\nimport { increment } from '../actions/increment'; \r\n\r\nclass ClickCounter extends Component {\r\n\r\n\tconstructor(props){\r\n            super(props);\r\n        }\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<Heading value={this.props.value}/>\r\n\t\t\t\t<Button increment={this.props.increment}/>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nlet mapStateToProps = (state)=> {\r\n\treturn {\r\n\t\tvalue:state.count\r\n\t}\r\n}\r\n\r\nlet mapDispatchToProps =  {\r\n\t\tincrement:increment\t\r\n}\r\n\r\nlet ClickCounterContainer = connect(mapStateToProps, mapDispatchToProps)(ClickCounter);\r\n\r\nexport default ClickCounterContainer;","export function increment () {\r\n\treturn ( {type:\"INCREMENT\"});\r\n}","import React, {Component} from 'react';\nimport{ connect }from 'react-redux';\nimport './App.css';\nimport ClickCounter from './components/clickcounter';\n\nclass App extends Component {\n  render() {\n  return (\n    <div className=\"App\">\n    \t<ClickCounter/>\n    </div>\n  );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport increaseReducer from './reducers/incrementReducer';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nlet store = createStore(increaseReducer);\n\n\nReactDOM.render(\n  <Provider store = {store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n\n\n"],"sourceRoot":""}